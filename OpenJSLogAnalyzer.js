/** OpenJSLogAnalyzer Copyright (C) 2014 Hendrik 'Xendo' Meyer This file is part of OpenJSLog OpenJSLog is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version. OpenJSLog is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Foobar. If not, see <http://www.gnu.org/licenses/>. *///TODO: Code documentation!!!/** * pad: Pads numbers to a specific amount of digits * @param num   number to pad * @param size  number of digits * @returns {string}    The output */function pad(num, size) {    var s = num+"";    while (s.length < size) s = "0" + s;    return s;}/** * Builds the List with the Object's items * @param parentObject  The Object to (further) Analyze. (Can also be the LogBuffer directly) * @param parentElement The element to host the list in. */function buildList(parentObject, parentElement) {    var rEl, rParent;    rParent = document.createElement('ul');    for (var key in parentObject) {        rEl = document.createElement('li');        if (typeof parentObject[key] == "object") {            isArray = parentObject[key] instanceof Array;            rEl.className = parentObject[key] instanceof Array ? 'parent array' : 'parent';            rEl.innerHTML = '<span class="key">' + key +'</span>: ' + ((isArray === true) ? ('[Array] ['): ('[Object] {'));            buildList(parentObject[key], rEl);        } else {            rEl.innerHTML = '<span class="key">' + key +'</span>: [' + typeof parentObject[key] + '] <span class="value">' + parentObject[key] + '</span>';        }        rEl.className += " " + (typeof parentObject[key]).toLowerCase();        rParent.appendChild(rEl);    }    parentElement.appendChild(rParent);}/** * OJSLanalyze: Builds the complete minimizeable List for a browsable LogBuffer. * @param object    The (parsed JSON) Object to Analyze. (Can also be the LogBuffer directly) * @param element   The element to host the container in. * @constructor */function OJSLanalyze(object, element) {    element.innerHTML = '';    element.className = "loganalyzer";    element.addEventListener('click', function (e) {        if (e.target.classList.contains('parent')) {            e.target.classList.toggle('expanded')        }    });    buildList(object.data, element);    var nodeindex = 0;    for(var notUsed in element.childNodes[0].childNodes){        try{            date = new Date(Number(object.timestamps[nodeindex]));            title = date.getFullYear() + "-" + date.getMonth() + "-" + date.getDate() + " " + date. getHours() + ":" + date.getMinutes() + ":" + date.getSeconds() + "." + pad(date.getMilliseconds(),3);            element.childNodes[0].childNodes[nodeindex].childNodes[0].innerHTML = title;            nodeindex++;        }catch (err){}    }}